
/*The code includes three libraries: "esp_camera.h", "Arduino.h", and "SD_MMC.h".

The program has two main functions, "setup()" and "loop()". In the "setup()" function, the camera and SD card are initialized.

The camera initialization sets the configuration settings for the camera, including the pins used to connect it to the board, the frame size, pixel format, and other parameters.

The SD card initialization checks if the card is present and ready for use.

In the "loop()" function, the program waits for a specified time interval (10 seconds) and then captures an image using the "esp_camera_fb_get()" function. The image is then saved on the SD card with a unique name that includes the current image count.

The program keeps track of the current image count and increments it with each captured image. Once the image count reaches 7, it resets to 1 to overwrite the oldest images.

The captured image is then released from the memory buffer using the "esp_camera_fb_return()" function. The program then repeats the loop, waiting for the next capture interval.
*/

#include "esp_camera.h"
#include "Arduino.h"
#include "SD_MMC.h"

const int captureInterval = 10000; //capture interval in ms
int imageCount = 1; //current image count
String imageName; //name of the current image

void setup() {
  Serial.begin(115200);

  //initialize camera
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_UXGA;
  config.jpeg_quality = 10;
  config.fb_count = 2;

  //initialize camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  Serial.println("Camera init successful");

  //initialize SD card
  if (!SD_MMC.begin()) {
    Serial.println("SD card initialization failed");
    return;
  }

  Serial.println("Sd card init successful");
}

void loop() {
  //wait for 30 seconds before capturing the next image
  delay(captureInterval);

  //capture image
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  //rename image
  imageName = String(imageCount) + ".jpg";
  Serial.println("Image name: " + imageName);

  //write image to file
  File file = SD_MMC.open("/" + imageName, FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file");
    return;
  }

  file.write(fb->buf, fb->len); //write image data to file
  file.close();

  //free image buffer
  esp_camera_fb_return(fb);

  //increment image count
  imageCount++;

  //if image count is greater than 6, reset image count to 1
  if (imageCount == 7) {
    imageCount = 1;
  }
}
